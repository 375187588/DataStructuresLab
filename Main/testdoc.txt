
#include "btreelib.h"

void btreeCreate()
{
	struct Node *r;
	
	allocateNode(&r);

	r->leaf = TRUE;
	r->n = 0;
	r->h = 0;
	
	root = r;		//sets root node
}

void allocateNode(struct Node ** M)
{
	(*M) = malloc(sizeof(struct Node));
	(*M)->key = malloc(sizeof(char)*2*t-1);
	(*M)->child = malloc(sizeof(struct Node *)*2*t);
}


//INSERTION
void btreeInsert(char *k)
{
	struct Node *r;
	
	r = root;
	if(r->n == 2*(t-1))				
	{
		btreeSplitRoot();
		btreeInsertNonFull(root,k);
	}
	
	else btreeInsertNonFull(r,k);	
}

void btreeSplitRoot()
{
	struct Node *s;
		
	s->n = 0;
	s->leaf = TRUE;
	s->h = 0;
	s->child[0] = root;
	root = s;

	btreeSplitChild(s,0);
}

void btreeInsertNonFull(struct Node *N,char *k)
{
	int i;
	
	i = N->n - 1;
	
	if(N->leaf)		
	{
		while(i>=0 && k < (N->key[i]))
		{
			N->key[i+1] = N->key[i];
			i--;
		}
		
		N->key[i+1] = k;
	}
	
	else		
	{
		while(i>=0 && k < (N->key[i]))
			i--;
		i++;
		
		struct Node *ch;
		ch = N->child[i];
		
		if(ch->n == 2*t-1)
		{
			btreeSplitChild(N,i);
			
			if(k > (N->key[t-1]))
				i++;
		}
		
		btreeInsertNonFull(N->child[i],k);
	}
}

void btreeSplitChild(struct Node *N,int i)
{
	int j;
	struct Node *y,*z;		
	
	allocateNode(&z);		
	y = N->child[i];
	
	
	for(j=0;j<t-1;j++)
		z->key[j] = y->key[t+j];
	
	
	if(!(y->leaf))
	{
		for(j=0;j<t;j++)
			z->child[j] = y->child[t+j];
	}
	
	z->n = t-1;			
	z->leaf = y->leaf;
	
	
	for(j=(N->n)-1;j>=i;j--)
		N->key[i+1] = N->key[i];
	N->key[i] = y->key[t-1];
	
	
	for(j=(N->n);j>=i;j--)
		N->key[i+1] = N->key[i];
	N->child[i+1] = z;
	
	y->h = N->h + 1;
	z->h = N->h + 1;	
	
	y->n = t-1;
	N->n = N->n + 1;
}


void btreeSearch(struct Node *N,int k)			//searches for the key 'k' in the B-tree
{
	int i,n;
	
	i = 0;
	n = N->n;
	
	
	while(i<n && k>(N->key[i]))
		i++;
	
	if(i<n && k==(N->key[i]))
		printf("\nKey found at position %d in the node at height %d!",i+1,N->h);
	
	else if(N->leaf)
		printf("\nKey not found");
	
	else btreeSearch(N->child[i],k);
}

void listKeys(struct Node *N)
{
	if(N->leaf==TRUE)
		displayNode(N);

	else
	{
		listKeys(N->child[0]);
		
		displayNode(N);
		
		int i;
		for(i=1;i<=(N->n);i++)
			listKeys(N->child[i]);
	}
}

void displayNode(struct Node *N)
{
	int i;
	printf("\n--NODE--\n");

	printf("Keys: "); 
	for(i=0;i<(N->n);i++)
		printf("%s",N->key[i]);

	printf("\nDepth: %d\n",N->h);
}
